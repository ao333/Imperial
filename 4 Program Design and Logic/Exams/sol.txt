*See OOP Solutions under \CPP\OOP

2017
i) AA,ID[applicant(ID,A)->ED(apply(ID,D)^(D=MSc v D=MRes v D=PhD))]

iii) ~EA[apply(A,PhD)^~EC(dqual(A,MSc,CS,C)^(interview(A) v accept(A,PhD)))]


2016
i) AID,C,I,Q,T[Order(ID,C,I,Q,T)->ET1(T<T1^(process(ID,C,I,Q,T1) v apology(ID,C,T1))]

v) AC,T[ET1,OID(invoice(OID,C,T1)^T1<T^~ET2(paid(OID,C,T2)^T1<T2^T2<=T))->owe(C,T)]

vi) AD[wellman(D)<->AI,T(sells(D,I)->EQ(instock(I,Q,T)^Q>0)]


2015
1c *Official
X->Y=~XvY
[(P->Q)^(R->S)^(PvR)]->(QvS)
[(~PvQ)^(~RvS)^(PvR)]->(QvS)
~[(~PvQ)^(~RvS)^(PvR)]v(QvS)
[(P^~Q)v(R^~s)v~(PvR)]v(QvS)         De Morgan
(P^~Q)v(R^~S)v~(PvR)v(QvS)           Associative
(P^~Q)v(R^~S)v~(PvR)v Q v S          Commutative
(P^~Q)vQv(R^~S)vSv~(PvR)
[(QvP)^(Qv~Q)]v[(RvS)^(Sv~s)]^~(PvR) distributive
(QvP)v(rvs0v~(PvR)                   X^True=X
QvPvRvSv~(PvR)                       Associative
QvSv(PvR)v~(PvR)                     Xv~X/True/Tautology

2a
i) EX,Y[tubeline(X)^tubeline(Y)^~(X=Y)^~EA,B,C(tubeline(A)^tubeline(B)^tubeline(C)^~(A=B)^~(B=C)^~(A=C)]
   ^AS[onNet(S)->EX(tubeline(X)^servedBy(S,X)]
   ^ES[onNet(S)^EX(tubeline(X)^servedBy(S,X))^~EA,B(tubeline(A)^tubeline(B)^~(A=B)^servedBy(S,A)^servedBY(S,B))]

ii) AL[tubeline(L)->ES1,S2(onNet(S1)^onNet(S2)^~(S1=S2)^servedBy(S1,L)^servedBy(S2,L)]
    ^AX,Y,S[tubeline(X)^tubeline(Y)^~(X=Y)^posChange(X,Y,S)<->onNet(S)^servedBy(S,X)^servedBY(S,Y)]

iii) AP,L[tubeline(L)^travel(P,L)->EV(validTravelDoc(V,P)^possess(P,V)]

iv) AV,P(validTravelDoc(V,P)->freedomPass(V)^over65(P)^possess(P,V) v dayTicket(V) v seasonTicket(V)

b
1. AS1,S2,C1,C2[cost(S1,S2,C1)^cost(S2,S1,C2)->C1=C2]
2. AS1,S2,S,C1,C2[hub(S1)^~hub(S2)^cost(S1,S,C1)^cost(S2,S,C2)->C1>C2]
3. hub(a)
4. ~hub(b)
5. cost(b,a,10)
6. cost(a,b,c)                                  Assume
7. hub(a)^hub(b)^cost(a,b,c)^cost(b,a,10)->c>10 AE,2
8. hub(a)^hub(b)^cost(a,b,c)^cost(b,a,10)       ^I,3,4,5,6
9. c>10                                         ->E,7,8
10. cost(a,b,c)^cost(b,a,10)->c=10              AE,1
11. cost(a,b,c)^cost(b,a,10)                    ^I,5,6
12. c=10                                        ->E,10,11
13. c>10^c=10                                   Inconsistent,9,12


2014
1a
i) EX,Y[day(X)^eve(Y)]

ii) AP,X[teaches(P,X)^day(X)^(~EC(teaches(P,C)^eve(C)) -> salary(P,sd)]^
    AP,X[teaches(P,X)^day(X)^eve(X) -> salary(P,sde)]^
    AP,X[teaches(P,X)^eve(X)^(~EC(teaches(P,C)^day(C)) -> salary(p,se)]

iii) AC,Sub[eve(C)^subject(Sub,C)->(type(Sub,languages) v type(Sub,humanities)]^
     ASub[EC(eve(C)^subject(Sub,C)->type(Sub,languages) v type(Sub,humanities))]^
     ~EC[subject(latin,C)^(day(C) v eve(C))]

iv) ASub,C,S[enrolled(Sub,C)^day(C)^subject(Sub,C)->sitsExam(S,Sub)]^
    ASub,S[EC(enrolled(S,C)^subject(Sub,C)^eve(C)^~EC(enrolled(S,C)^subject(Sub,C)^day(C))->~sitsExam(S,Sub))]

b
i) Start from S1 to arrive at S4
AX,T[~(exit(X,T)^~paid_for(X,T)) v stolen(X,T)] Implication
AX,T[~exit(X,T) v ~~paid_for(X,T) v stolen(X,T)] De Morgan
AX,T[~exit(X,T) v paid_for(X,T) v stolen(X,T)] Double Negation
AX,T[stolen(X,T) v (~exit(X,T) v paid_for(X,T))] Associative
AX,T[~stolen(X,T) -> (~exit(X,T) v paid_for(X,T))] Implication

ii) S3
AX,T[~(paid_for(X,T) v stolen(X,T) v exit(X,T)] Implication
AX,T[~paid_for(X,T)^~stolen(X,T) v exit(X,T)] Implication
~EX,T[~(~paid_for(X,T)^~stolen(X,T) v exit(X,T))] All True, None False Equivalence
~EX,T[~(~paid_for(X,T)^~stolen(X,T))^~exit(X,T)] De Morgan
~EX,T[(paid_for(X,T) v stolen(X,T))^~exit(X,T)] De Morgan

iii) A unless B: ~B->A/BvA
AI,Y,T[(approved(Y,I,T)^authorized(Y))v(exit(I,T)^~paid_for(I,T)->stolen(I,T))]^
AX[authorized(X)<->manager(X) v depManager(X)]


2013
2a \1 Logic\3.3S Coursework

b i)
1. AX[P(X)->Q(X)]
2. ~E[Q(Y)] |- ~EX[P(X)]
  3. EX[P(X)]            Assume
  4. P(a)->Q(a)          AE,1
    5. P(a)              Assume
    6. Q(a)              ->E,4,5
    7. EX[Q(X)]          EI,6
  8. EX[Q(X)]            EE,3,5,7
9. ~EX[P(X)]             RAA,2,3,8

1. AX[P(X)->Q(X)]
2. AX[S(X)->M(X)vN(X)]
3. ~EX[Q(X)]
4. AX[N(X)->AY(R(Y)->P(Y)]
5. EX[R(X)->~EY(M(Y))]
6. ~EX[P(X)]
7. P(a)->Q(a)              AE,1
8. S(a)->M(a)vN(a)         AE,2
9. N(a)->AY(R(Y)->P(Y)]    AE,4
  10. S(a)                 Assume
  11. M(a)vN(a)            ->E,8,10
  12. ~EX[R(X)]v~EY[M(Y)]  Implication,5,Natural Deduce Seperately
  13. ~(EX[R(X)]^EY[M(Y)]  De Morgan
    14. R(a)               Assume
    15. EX[R(X)]           EI,14
      16.EY[M(Y)]          Assume
      17. EX[R(X)]^EY[m(Y)] ^I,15,16
    18. ~EY[M(Y)]           RAA,16,13,17


1 Propositional Logic 1
Show: A->B = ~(A^~B)
(~AvB)
~~(~AvB)
~(A^~B)

Show: A<->B = (A^B)v(~A^~B)
(A->B)^(B->A)
(~AvB)^(~BvA)
((~AvB)^~B)v(~AvB)^A)
((~A^~B)v(B^~B))v((~A^A)v(B^A))
(~A^~B)v(B^A)
(A^B)v(~A^~B)

Show: A<->B = ~A<->~B
(A->B)^(B->A)
(~AvB)^(~BvA)
(Bv~A)^(Av~B)
(~~Bv~A)^(~~Av~B)
(~B->~A)^(~A->~B)
(~A->~B)^(~B->~A)
~A<->~B

Show ~(P<->Q) = (PvQ)^~(P^Q)
~((P->Q)^(Q->P))
~((~PvQ)^(~QvP))              Implication
~((~P^~Q)v(~P^P)v(Q^~Q)v(Q^P) Distributive
~((~P^~Q)v(P^Q))              Inconsistency
~(~P^~Q)^~(P^Q)               Double Negation
(PvQ)^~(P^Q)                  Double Negation


1.1 Propositional Logic 1
Thief: AvBvC
A^~B->C = ~(A^~B)vC = ~AvBvC = ~Av(~~BvC) = ~Av(~B->C) = A->(~B->C)
B->C
C->~(B->A) = C->~(~BvA) = C->(B^~A)

A     Assume
~B->C
B->C
C     Dilemma
B^~A  Both B and ~A have to be true)
      A is inconsistent with ~A

BvC   A is not true
C->B
B->C
B<->C Since at least 1 has to be a thief, and A is not, then B and C are both thieves


2.1S Predicate Logic 1
6) ~AX,Y,Z(lecture(X)^lecture(Y)^~same(X,Y)^office(Z)^has(X,Z)^has(Y,Z))
6) AL,X,Y(lecture(L)^office(X)^office(Y)^~same(X,Y)->~(has(L,X)^has(L,Y)))
8) AX(phd(X)->EA(office(X)^has(X,A)) ^ AX(phd(X)->EY,Z(phd(Y)^office(Z)^has(Y,Z)^has(X,Z))
10)


3 Predicate Logic 2
AX(cautious(X) v normal(X) -> EY shelter(Y,X))
~EX~(cautious(X) v normal(X) -> EY shelter(Y,X))   AX P(X)=~EX ~P9X
~EX~(~(cautious(X) v normal(X)) v EY shelter(Y,X)) P->Q=~PvQ
~EX~~(cautious(X) v normal(X)) ^ ~EY shelter(Y,X)) De Morgan
~EX(cautious(X) v normal(X)) ^ ~EY shelter(Y,X))   Double Negation


4 Propositional Logic 2
Show A->B, B->C |- A->C
1. A->B
2. B->C
  3. A  Assume
  4. B  1,3,->E
  5. C  2,4,->E

Show Q->R |- (P->Q)->(P->R)
1. Q->R
  2. P->Q         Assume
    3. P          Assume
    4. Q          2,3,->E
    5. R          1,4,->E
  6. P->R         3,5,->I
7. (P->Q)->(P->R) 2,6,->I

Show X->Y |- ~Y->~X (Contraposition)
1. X->Y
  2. ~Y   Assume
    3. X  Assume
    4. Y  1,3,->E
  5. ~X   3,4,2,RAA
6. ~Y->~X 1,5,->I

Show XvY, X->Z, Y->Z |- Z (Proof by cases)
1. XvY
2. X->Z
3. Y->Z
  4. ~Z  Assume
    5. X Assume
    6. Z 2,5,->E
  7. ~X  5,6,4,RAA
  8. Y   Assume
    9. Z 3,8,->E
  10. ~Y 8,9,4,RAA
  11. Y  1,7,Inconsistency,vE
12. Z    10,11,4,RAA

Show snow,mild->~snow |- ~mild 
1. snow
2. mild->~snow
  3. mild      Assume
  4. ~snow     2,3,->E
5. ~mild       3,4,1,RAA

Prove Elections
1. E->LvT
2. ~U->~L
3. E
  4. ~T   Assume
  5. L    vE
  6. L->U Contraposition
  7. U    6,->E
8. ~T->U  4,7,->I

Prove Elections 2
1. L
2. ~U->~L

  3. ~U     Assume
  4. ~L     2,3,->E
5. U        3,4,1,RAA

  3. ~~Uv~L Implication
  4. Uv~L   Double Negation
  5. ~LvU   Commutative
  6. L->U   Implication
7. U        1,7,->E

  3. ~~Uv~L Implication
  4. ~~U    1,3,Lv~L tautology, forcing ~~U to be True in OR Truth Table 
5. U        4,Double Negation

  3. ~~L    1,Double Negation
  4. ~~U    1,3,Modus Tollens
5. U        4,Double Negation

Exercise C: Show CutvTaxvPR
1. TvLvD
2. T->Cut
3. L->Tax
4. D->PR
5. TvLvD->CutvTaxvPR (2,3,4,A)
6. CutvTaxvPR (1,5,->E)


6 Predicate Logic 3
1. AX(G(X)vS(X)->GP(X))
2. G(Martin)vS(Martin)
  3. G(Martin)vS(Martin)->GP(Martin) 1,AE
  4. GP(Martin)                      3,4,->E

1. AX(message(X)->encrypted(X))
2. AX(encrypted(X)->secure(X))
  3. message(m)->encrypted(m)   1,AE
  4. encrypted(m)->secure(m)    2,AE
5. message(m)->secure(m)        3,4,->I
6. AX(message(X)->secure(X))    5,AI

5. message(m)   Assume
6. encrypted(m) 3,5,->E
7. secure(m)    4,6,->E

E-Elimination
1. EX(m(X)^p(X))
  2. m(f)^p(f)   Assume
  3. p(f)        2^E
  4. EX(p(X)     3,EI
5. p(X)          1,2,4,EE

1. EX(hack(X,f)
2. AX,F(hack(X,F)->stolen(X,F)vhelp(X))
  3. hack(s,f)                          Assume
  4. AF(hack(s,F)->stolen(s,F)vhelp(s)) 2,AE
  5. hack(s,f)->stolen(s,f)vhelp(s)     4,AE
  6. stolen(s,f)vhelp(s)                3,5,->E
7. EX(stolen(X,f)vhelp(X)               6,EI


6.1 Predicate Logic 3
1. AX(p(X)->m(X)vn(X))
2. AX(m(X)->EYq(X,Y))
3. AX(n(X)->EYq(x,Y))
4. p(a)
  5. p(a)->m(a)vn(a)   1,AE
  6. m(a)vn(a)         4,5,->E
  7. m(a)->EYq(a,Y)    2,AE
  8. n(a)->EYq(a,Y)    2,AE
9. EYq(a,Y)            6,7,8,Proof By Cases

AX(A->B)
AX(~AvB)
~~AX[~AvB)
~AX[~A->B]
EX(A->B)